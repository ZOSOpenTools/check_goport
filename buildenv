# Currently just checks for the presence of Go on the system, used to simplify zopen build 
# In the future, this will be used to build Go from source
export ZOPEN_TYPE="BARE"

export ZOPEN_CATEGORIES="development"
export ZOPEN_NAME="check_go"
export ZOPEN_CONFIGURE=skip
export ZOPEN_CHECK=zopen_check
export ZOPEN_MAKE=skip
export ZOPEN_INSTALL=zopen_install

zopen_check()
{
  # Nothing to check at this time
}

zopen_check_results()
{
  # Nothing to check here, assume everything passed
  echo "actualFailures:0"
  echo "totalTests:1"
  echo "expectedFailures:1"
  echo "expectedTotalTests:1"
}

zopen_append_to_env()
{
cat <<zz
  if [ ! -z "\$ZOPEN_IN_ZOPEN_BUILD" ]; then
    # Find the path to go
    GO_PATH=\$(PATH="\$ZOPEN_OLD_PATH" /bin/type go | cut -f3 -d' ')
  else
    return 0 # This should do nothing if not in zopen build
  fi

  # If Go is not found, exit with an error message
  if [ -z "\${GO_PATH}" ]; then
      echo "Go not found. Please install from https://www.ibm.com/products/open-enterprise-sdk-go-zos." >&2
      return 1
  fi

  if ! \${GO_PATH} version 2>&1 | grep -q "zos/s390x"; then
    echo "The go executable is not a zos s390 go compiler. Please install https://www.ibm.com/products/open-enterprise-sdk-go-zos." >&2
    return 1;
  fi

  if [ ! -z "\$ZOPEN_IN_ZOPEN_BUILD" ]; then
    # Set the PATH environment variable to the directory of the Go path
    export PATH="\$(dirname "\${GO_PATH}"):\${PATH}"

    # Set the go environment vars to the zopen working dir so as not to fill up $HOME
    export GOPATH="\$ZOPEN_ROOT/go"
    export GOCACHE="\$ZOPEN_ROOT/gocache"
    export GOTMPDIR="\$ZOPEN_ROOT/gotmp"
    mkdir -p \$GOPATH
    mkdir -p \$GOCACHE
    mkdir -p \$GOTMPDIR
  fi
zz
}

zopen_get_version()
{
  echo "1.0.0"
}


zopen_install() {
  mkdir -p $ZOPEN_INSTALL_DIR
}
